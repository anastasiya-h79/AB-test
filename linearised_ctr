"""A/B-тест с линеаризированным CTR

Постановка задач

Относительно недавно (в 2018-м году) исследователи из Яндекса разработали метод анализа тестов над метриками-отношениями (в нашем случае это likes/views).

Идея метода заключается в следующем: Вместо того, чтобы заталкивать в тест «поюзерные» CTR, можно сконструировать другую метрику и анализировать ее, но при этом гарантируется (в отличие от сглаженного CTR), что если тест на этой другой метрике «прокрасится» и увидит изменения, значит изменения есть и в метрике исходной (то есть в лайках на пользователя и в пользовательских CTR).

План A/B-теста:

Считаем общий CTR в контрольной группе 𝐶𝑇𝑅𝑐𝑜𝑛𝑡𝑟𝑜𝑙=𝑠𝑢𝑚(𝑙𝑖𝑘𝑒𝑠)/𝑠𝑢𝑚(𝑣𝑖𝑒𝑤𝑠).
Cчитаем поюзерную метрику 𝑙𝑖𝑛𝑒𝑎𝑟𝑖𝑧𝑒𝑑_𝑙𝑖𝑘𝑒𝑠=𝑙𝑖𝑘𝑒𝑠−𝐶𝑇𝑅𝑐𝑜𝑛𝑡𝑟𝑜𝑙∗𝑣𝑖𝑒𝑤𝑠 в контрольной и тестовой группах.
Cравниваем t-тестом отличия в группах по метрике 𝑙𝑖𝑛𝑒𝑎𝑟𝑖𝑧𝑒𝑑_𝑙𝑖𝑘𝑒𝑠. Анализируем тест между группами 0 и 3 и между группами 1 и 2.
[1,0] - контроль, [2,3] - тест (два новых алгоритма рекомендации постов в ленте).

Подготовительная часть: """

#Импортируем нужные библиотеки. Загружаем данные из Clickhouse
import pandas as pd
import pandahouse as ph
import datetime as dt
import seaborn as sns
import numpy as np
from scipy import stats

connection = {"host": " ",
             "database": " ",
             "user": " ",
             "password": " "}
             
# Группы 1 и 2
query_12 = '''
SELECT exp_group, 
    user_id,
    sum(action = 'like') as likes,
    sum(action = 'view') as views,
    (SELECT sum(action = 'like')/sum(action = 'view') FROM {db}.feed_actions WHERE toDate(time) between '2022-11-02' and '2022-11-08'
    and exp_group = 1) as CTRcontrol,
    likes/views as ctr,
    (likes - CTRcontrol*views) as linearized_likes
FROM {db}.feed_actions 
WHERE toDate(time) between '2022-11-02' and '2022-11-08'
    and exp_group in (1,2)
GROUP BY exp_group, user_id
'''

df_12 = ph.read_clickhouse(query_12, connection=connection)
df_12.head()

# Группы 0 и 3
query_03 = '''
SELECT exp_group, 
    user_id,
    sum(action = 'like') as likes,
    sum(action = 'view') as views,
    (SELECT sum(action = 'like')/sum(action = 'view') FROM {db}.feed_actions WHERE toDate(time) between '2022-11-02' and '2022-11-08'
    and exp_group = 0) as CTRcontrol,
    likes/views as ctr,
    (likes - CTRcontrol*views) as linearized_likes
FROM {db}.feed_actions 
WHERE toDate(time) between '2022-11-02' and '2022-11-08'
    and exp_group in (0,3)
GROUP BY exp_group, user_id
'''

df_03 = ph.read_clickhouse(query_03, connection=connection)
df_03.head()

#Исследовательская часть

#Смотрим на распределение метрики linearized_likes
# Группы 1 и 2
​
groups = sns.histplot(data = df_12, 
              x='linearized_likes', 
              hue='exp_group', 
              palette = ['r', 'b'],
              alpha=0.5,
              kde=False)
              
# Группы 0 и 3

groups = sns.histplot(data = df_03, 
              x='linearized_likes', 
              hue='exp_group', 
              palette = ['r', 'b'],
              alpha=0.5,
              kde=False)

"""Вывод: В группах 0 и 3 мы имеем дело с нормальным распределением, поэтому ничто не мешаем нам применить t-тест, 
его результаты будут статистически значимыми. 
Распределение величины в группе 2 не является нормальным (оно бимодально, имеются "жирные выбросы"). 
Цель проведения t-test'a для групп 1 и 2 - сранить значение p-value с прошлым A/B-тестом (где в качестве метрики принимался поюзерный CTR)."""

#t-test для групп 0 и 3
# t-test для linearized_likes

stats.ttest_ind(df_03[df_03.exp_group == 0].linearized_likes,
               df_03[df_03.exp_group == 3].linearized_likes,
               equal_var=False)
#Ttest_indResult(statistic=-15.214995460903827, pvalue=5.4914249479690016e-52)

# t-test для пользовательских ctr

stats.ttest_ind(df_03[df_03.exp_group == 0].ctr,
               df_03[df_03.exp_group == 3].ctr,
               equal_var=False)
#Ttest_indResult(statistic=-13.896870721904069, pvalue=1.055849414662529e-43)

"""Вывод: Значимые отличия были получены во время обоих тестов. 
Но благодаря linearized_likes получилось сильно уменьшить p-value (увеличить чувствительность исследуемой метрики)."""

[df_03[df_03.exp_group == 0].linearized_likes.mean(), df_03[df_03.exp_group == 3].linearized_likes.mean()]
#[7.191411627054919e-16, 1.0713337480659026]

#Вывод: новый алгоритм, разработанный командой ML, улучшил показатель исследуемой метрики.

#t-test для групп 1 и 2
# t-test для linearized_likes

stats.ttest_ind(df_12[df_12.exp_group == 1].linearized_likes,
               df_12[df_12.exp_group == 2].linearized_likes,
               equal_var=False)
#Ttest_indResult(statistic=6.122579994775973, pvalue=9.439432187037712e-10)

# t-test для пользовательских ctr

stats.ttest_ind(df_12[df_12.exp_group == 1].ctr,
               df_12[df_12.exp_group == 2].ctr,
               equal_var=False)
#Ttest_indResult(statistic=0.7094392041270485, pvalue=0.4780623130874935)

[df_12[df_12.exp_group == 1].linearized_likes.mean(), df_12[df_12.exp_group == 2].linearized_likes.mean()]
#[-4.4272332379932823e-16, -0.6592771236485203]

"""Вывод: t-тест на пользовательских CTR не показал значимых отличий. 
С линеаризированной метрикой мы можем отклонить нулевую гипотезу о равенстве средних в двух группах (p-value < 0.05). 
Однако распределение в группе 2 не является нормальным, поэтому доверять результату на 100 % не стоит."""

"""Выводы A/B-тестов c линеаризованной метрикой:
Благодаря линеаризованной метрике, мы смогли повысить чувствительность исследуемой метрики. 
Т-test на пользовательских CTR не давал статистически значимых отличий. 
Т-test на линеаризованной метрике помог их обнаружить в группах 1 и 2. 
Т-test'ы на линеаризованной метрике показали, что новые алгоритмы рекомендации повлияли на исследуемую метрику. 
Алгоритм в группе 2 понизил ее, другой алгоритм в группе 3 повысил ее."""
